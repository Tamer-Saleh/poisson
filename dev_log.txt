2020/11/27
The next step is to use the vessel classification model as a backbone for a vessel
detection model. I began writing the script `vessel_detector.py` which contains
the code for the model.


2020/11/25
- Using the test dataset containing 520 images, I tested the classification
  model. Model generated 0 false positives and identified 12 of the 54 images 
  containing vessels. Because the test data comes from the same distribution as
  target data, it appears likely that the true positive rate will dominate the 
  false positive rate in use, therefore allowing for the derivation of population-
  level results concerning the target vessel fleets.
- It seems useful to test methods for improving model performance using imagery
  generated from PlanetScene imagery. One potential avenue for development is 
  make a training dataset containing approximately 1000 tiles from PlanetScene
  images and retrain the model on this set, using appropriate hyperparameters to
  account for the small dataset size.


2020/11/24
- I created a test dataset containing image tiles segmented from PlanetScene images 
  of Chimbote. Approximately 10% of the samples contain images, and the dataset poses 
  an extreme challange for the algorithm.
- Updated vessel_classifier_test_suite.py to use test images.
- Model performed extremely well on test imagery: attained a precision score of 1.000 and a recall of 0.267, which is much better than I expected considering the difficulty of the imagery.


2020/11/11
- Model has completed 30 epochs since restart (79 overall)
- Validation loss stabilized at roughly 0.05 to 0.07
- Validation accuracy peaked at approximately 0.984
- Total number of samples seen: 15182640


2020/11/6
- Model has completed 11 epochs since restart (49 total)
- Validation loss slightly decreased over the 11 epochs but seems steady
- Validation accuracy peaked at 0.98 on epoch 7 and hovered around 0.975
  on the following epochs.
- VM restarted after 11th epoch; I will restart training and see how that goes.


2020/11/5
- Model has completed 5 epochs since restart (43 total)
- Because valid loss is decreasing consistently it appears that the model still has
  room for improvement.


2020/11/4
- Model completed 25 epochs since restart with smaller weight decay (38 overall)
- Validation loss continuing to drop
- Validation accuracy near 0.975 (moving average estimate - just a ballpark figure)

Because the virtual machine restarted during the 26th epoch, I restarted training.


2020/11/2
- Model completed 13 epochs since restart with smaller weight decay (27 epochs overall)
- Validation loss continuing to drop; currently around 0.085
- Change in validation loss per epoch continuing to decrease suggesting the model
  has almost converged

I intend to let the model continue to train until validation loss begins to consistently increase, 
or until the model has completed 44 epochs overall (30 on this training
session). The model is estimated to complete 44 epochs on or by 2020/11/5 at the current
pace.


2020/11/1
- Model completed 7 epochs with parameters
    - learning rate = 1e-4
    - beta 1 (Adam param.) = 0.9
    - beta 2 (Adam param.) = 0.999
    - weight decay = 1e-7 # Only change from previous training
- Validation loss is steady around 0.082 but decreasing overall (slowly)
- Accuracy on validation set after 20th iter. = 0.964

Next Steps:
    - Get some idea of a target performance level to determine when to finish training (e.g.):
        - Create baseline model (e.g. SVM) and train — compare performance to trained model 
	- Identify mislabeled samples
        - Change hyperparameters according to best practices recs.
    - Create dataset of classified PlanetScene images
    - Test performance on dataset
    - If the performance isn't acceptable then:
	- Add transformations for training data to make more similar to target data
	- Change hyperparams according to best practices
	- Retrain model with PlanetScene samples — follow best practices for situations
          where a model is fine-tuned on a much smaller dataset than the one on which
	  it was originally trained.
	- Repeat until model performs well enough
    - Think about how to use the classification model with the object detection model. 
      The previous object detection model used a ResNet50 architecture as its "backbone". 
      Presumably we can do the same thing with our classification model.	


2020/10/31
- Vessel classifier is training. 
- Model completed 14 epochs with parameters
    - learning rate = 1e-4
    - beta 1 (Adam param.) = 0.9
    - beta 2 (Adam param.) = 0.999
    - weight decay = 1e-5


2020/10/29
- Changed validation set to include only images blurred using Gaussian filter with
  radius = 2. The PlanetScene images are of a lower spatial res. than almost all of 
  the training samples and therefore the valid. set needs to include more blurred 
  images.
- Changed probability of Gaussian blur being applied to each training sample on ingest
  from 0.1 to 0.5 for the same reason.
- Started training